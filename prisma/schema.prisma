// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  krid      String  @id
  email     String  @unique
  name      String?
  athleteId String?

  activities Activity[]
  createdEvents Event[] @relation("EventCreator")
  eventParticipations EventParticipant[]
}

model Activity {
  id             BigInt   @id
  user           User     @relation(fields: [userKRId], references: [krid])
  userKRId       String
  name           String
  type           String
  sportType      String
  distance       Float
  movingTime     Int
  elapsedTime    Int
  totalElevation Float
  startDate      DateTime
  // UTCOffest
  startDateLocal DateTime
  timezone       String?

  averageSpeed Float?
  maxSpeed     Float?
  workoutType  Int?

  // mapId             String?    // strava "map.id"
  // summaryPolyline   String?    // careful: polylines can get long!
  // start lat long
  // end lat long

  // trainer
  // manual
  // pirvate
  // visibility
  // upload id / external

  // -----

  // kudosCount        Int?
  // commentCount      Int?
  // achievementCount  Int?

  // visibility        String?
  // private           Boolean    @default(false)

  createdAt DateTime @default(now())
}

model Event {
  id                    String   @id @default(cuid())
  title                 String
  description           String?
  date                  DateTime
  location              String
  maxParticipants       Int?
  category              String   // cycling, running, hiking, etc.
  difficulty            String?  // beginner, intermediate, advanced
  distance              Float?   // in meters
  registrationDeadline  DateTime?
  isActive              Boolean  @default(true)
  
  createdBy   String
  creator     User   @relation("EventCreator", fields: [createdBy], references: [krid])
  
  participants EventParticipant[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([date])
  @@index([category])
  @@index([createdBy])
}

model EventParticipant {
  id         String   @id @default(cuid())
  eventId    String
  userKRId   String
  status     String   @default("registered") // registered, waitlist, cancelled
  
  event      Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userKRId], references: [krid])
  
  registeredAt DateTime @default(now())
  
  @@unique([eventId, userKRId])
  @@index([eventId])
  @@index([userKRId])
}
